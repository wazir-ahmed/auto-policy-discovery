// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: v1/discovery/discovery.proto

package discovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (Discovery_GetPolicyClient, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (Discovery_GetPolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Discovery_ServiceDesc.Streams[0], "/v1.discovery.Discovery/GetPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryGetPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Discovery_GetPolicyClient interface {
	Recv() (*GetPolicyResponse, error)
	grpc.ClientStream
}

type discoveryGetPolicyClient struct {
	grpc.ClientStream
}

func (x *discoveryGetPolicyClient) Recv() (*GetPolicyResponse, error) {
	m := new(GetPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations must embed UnimplementedDiscoveryServer
// for forward compatibility
type DiscoveryServer interface {
	GetPolicy(*GetPolicyRequest, Discovery_GetPolicyServer) error
	mustEmbedUnimplementedDiscoveryServer()
}

// UnimplementedDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (UnimplementedDiscoveryServer) GetPolicy(*GetPolicyRequest, Discovery_GetPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedDiscoveryServer) mustEmbedUnimplementedDiscoveryServer() {}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_GetPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPolicyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServer).GetPolicy(m, &discoveryGetPolicyServer{stream})
}

type Discovery_GetPolicyServer interface {
	Send(*GetPolicyResponse) error
	grpc.ServerStream
}

type discoveryGetPolicyServer struct {
	grpc.ServerStream
}

func (x *discoveryGetPolicyServer) Send(m *GetPolicyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPolicy",
			Handler:       _Discovery_GetPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/discovery/discovery.proto",
}
